import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { IotHubClientContext } from "../iotHubClientContext";
/** Class representing a Certificates. */
export declare class Certificates {
    private readonly client;
    /**
     * Create a Certificates.
     * @param {IotHubClientContext} client Reference to the service client.
     */
    constructor(client: IotHubClientContext);
    /**
     * Returns the list of certificates.
     * @summary Get the certificate list.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificatesListByIotHubResponse>
     */
    listByIotHub(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesListByIotHubResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param callback The callback
     */
    listByIotHub(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.CertificateListDescription>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByIotHub(resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateListDescription>): void;
    /**
     * Returns the certificate.
     * @summary Get the certificate.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificatesGetResponse>
     */
    get(resourceGroupName: string, resourceName: string, certificateName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param callback The callback
     */
    get(resourceGroupName: string, resourceName: string, certificateName: string, callback: msRest.ServiceCallback<Models.CertificateDescription>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, resourceName: string, certificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateDescription>): void;
    /**
     * Adds new or replaces existing certificate.
     * @summary Upload the certificate to the IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificatesCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, resourceName: string, certificateName: string, options?: Models.CertificatesCreateOrUpdateOptionalParams): Promise<Models.CertificatesCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, resourceName: string, certificateName: string, callback: msRest.ServiceCallback<Models.CertificateDescription>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, resourceName: string, certificateName: string, options: Models.CertificatesCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.CertificateDescription>): void;
    /**
     * Deletes an existing X509 certificate or does nothing if it does not exist.
     * @summary Delete an X509 certificate.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, resourceName: string, certificateName: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, resourceName: string, certificateName: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, resourceName: string, certificateName: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Generates verification code for proof of possession flow. The verification code will be used to
     * generate a leaf certificate.
     * @summary Generate verification code for proof of possession flow.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificatesGenerateVerificationCodeResponse>
     */
    generateVerificationCode(resourceGroupName: string, resourceName: string, certificateName: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesGenerateVerificationCodeResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param callback The callback
     */
    generateVerificationCode(resourceGroupName: string, resourceName: string, certificateName: string, ifMatch: string, callback: msRest.ServiceCallback<Models.CertificateWithNonceDescription>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param options The optional parameters
     * @param callback The callback
     */
    generateVerificationCode(resourceGroupName: string, resourceName: string, certificateName: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateWithNonceDescription>): void;
    /**
     * Verifies the certificate's private key possession by providing the leaf cert issued by the
     * verifying pre uploaded certificate.
     * @summary Verify certificate's private key possession.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificatesVerifyResponse>
     */
    verify(resourceGroupName: string, resourceName: string, certificateName: string, ifMatch: string, options?: Models.CertificatesVerifyOptionalParams): Promise<Models.CertificatesVerifyResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param callback The callback
     */
    verify(resourceGroupName: string, resourceName: string, certificateName: string, ifMatch: string, callback: msRest.ServiceCallback<Models.CertificateDescription>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param certificateName The name of the certificate
     * @param ifMatch ETag of the Certificate.
     * @param options The optional parameters
     * @param callback The callback
     */
    verify(resourceGroupName: string, resourceName: string, certificateName: string, ifMatch: string, options: Models.CertificatesVerifyOptionalParams, callback: msRest.ServiceCallback<Models.CertificateDescription>): void;
}
//# sourceMappingURL=certificates.d.ts.map