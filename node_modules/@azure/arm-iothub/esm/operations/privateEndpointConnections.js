/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/privateEndpointConnectionsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a PrivateEndpointConnections. */
var PrivateEndpointConnections = /** @class */ (function () {
    /**
     * Create a PrivateEndpointConnections.
     * @param {IotHubClientContext} client Reference to the service client.
     */
    function PrivateEndpointConnections(client) {
        this.client = client;
    }
    PrivateEndpointConnections.prototype.list = function (resourceGroupName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, listOperationSpec, callback);
    };
    PrivateEndpointConnections.prototype.get = function (resourceGroupName, resourceName, privateEndpointConnectionName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            privateEndpointConnectionName: privateEndpointConnectionName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Update the status of a private endpoint connection with the specified name
     * @summary Update private endpoint connection
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param properties
     * @param [options] The optional parameters
     * @returns Promise<Models.PrivateEndpointConnectionsUpdateResponse>
     */
    PrivateEndpointConnections.prototype.update = function (resourceGroupName, resourceName, privateEndpointConnectionName, properties, options) {
        return this.beginUpdate(resourceGroupName, resourceName, privateEndpointConnectionName, properties, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Delete private endpoint connection with the specified name
     * @summary Delete private endpoint connection
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param [options] The optional parameters
     * @returns Promise<Models.PrivateEndpointConnectionsDeleteMethodResponse>
     */
    PrivateEndpointConnections.prototype.deleteMethod = function (resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return this.beginDeleteMethod(resourceGroupName, resourceName, privateEndpointConnectionName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Update the status of a private endpoint connection with the specified name
     * @summary Update private endpoint connection
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param properties
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    PrivateEndpointConnections.prototype.beginUpdate = function (resourceGroupName, resourceName, privateEndpointConnectionName, properties, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            privateEndpointConnectionName: privateEndpointConnectionName,
            properties: properties,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Delete private endpoint connection with the specified name
     * @summary Delete private endpoint connection
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    PrivateEndpointConnections.prototype.beginDeleteMethod = function (resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            privateEndpointConnectionName: privateEndpointConnectionName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    return PrivateEndpointConnections;
}());
export { PrivateEndpointConnections };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.privateEndpointConnectionName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.privateEndpointConnectionName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            properties: "properties"
        },
        mapper: __assign(__assign({}, Mappers.PrivateEndpointConnection), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        201: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.privateEndpointConnectionName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        202: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        204: {},
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
//# sourceMappingURL=privateEndpointConnections.js.map