/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/certificatesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Certificates. */
var Certificates = /** @class */ (function () {
    /**
     * Create a Certificates.
     * @param {IotHubClientContext} client Reference to the service client.
     */
    function Certificates(client) {
        this.client = client;
    }
    Certificates.prototype.listByIotHub = function (resourceGroupName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, listByIotHubOperationSpec, callback);
    };
    Certificates.prototype.get = function (resourceGroupName, resourceName, certificateName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            certificateName: certificateName,
            options: options
        }, getOperationSpec, callback);
    };
    Certificates.prototype.createOrUpdate = function (resourceGroupName, resourceName, certificateName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            certificateName: certificateName,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    Certificates.prototype.deleteMethod = function (resourceGroupName, resourceName, certificateName, ifMatch, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            certificateName: certificateName,
            ifMatch: ifMatch,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Certificates.prototype.generateVerificationCode = function (resourceGroupName, resourceName, certificateName, ifMatch, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            certificateName: certificateName,
            ifMatch: ifMatch,
            options: options
        }, generateVerificationCodeOperationSpec, callback);
    };
    Certificates.prototype.verify = function (resourceGroupName, resourceName, certificateName, ifMatch, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            certificateName: certificateName,
            ifMatch: ifMatch,
            options: options
        }, verifyOperationSpec, callback);
    };
    return Certificates;
}());
export { Certificates };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByIotHubOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateListDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.certificateName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.certificateName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch0,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            properties: [
                "options",
                "properties"
            ]
        },
        mapper: __assign(__assign({}, Mappers.CertificateDescription), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CertificateDescription
        },
        201: {
            bodyMapper: Mappers.CertificateDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.certificateName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var generateVerificationCodeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/generateVerificationCode",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.certificateName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateWithNonceDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var verifyOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/verify",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.certificateName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            certificate: [
                "options",
                "certificate"
            ]
        },
        mapper: __assign(__assign({}, Mappers.CertificateVerificationDescription), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CertificateDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
//# sourceMappingURL=certificates.js.map