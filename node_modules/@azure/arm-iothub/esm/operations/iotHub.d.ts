import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import { IotHubClientContext } from "../iotHubClientContext";
/** Class representing a IotHub. */
export declare class IotHub {
    private readonly client;
    /**
     * Create a IotHub.
     * @param {IotHubClientContext} client Reference to the service client.
     */
    constructor(client: IotHubClientContext);
    /**
     * Manually initiate a failover for the IoT Hub to its secondary region. To learn more, see
     * https://aka.ms/manualfailover
     * @summary Manually initiate a failover for the IoT Hub to its secondary region
     * @param iotHubName Name of the IoT hub to failover
     * @param resourceGroupName Name of the resource group containing the IoT hub resource
     * @param failoverRegion Region the hub will be failed over to
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    manualFailover(iotHubName: string, resourceGroupName: string, failoverRegion: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Manually initiate a failover for the IoT Hub to its secondary region. To learn more, see
     * https://aka.ms/manualfailover
     * @summary Manually initiate a failover for the IoT Hub to its secondary region
     * @param iotHubName Name of the IoT hub to failover
     * @param resourceGroupName Name of the resource group containing the IoT hub resource
     * @param failoverRegion Region the hub will be failed over to
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginManualFailover(iotHubName: string, resourceGroupName: string, failoverRegion: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
}
//# sourceMappingURL=iotHub.d.ts.map