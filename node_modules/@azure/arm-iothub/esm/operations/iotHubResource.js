/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/iotHubResourceMappers";
import * as Parameters from "../models/parameters";
/** Class representing a IotHubResource. */
var IotHubResource = /** @class */ (function () {
    /**
     * Create a IotHubResource.
     * @param {IotHubClientContext} client Reference to the service client.
     */
    function IotHubResource(client) {
        this.client = client;
    }
    IotHubResource.prototype.get = function (resourceGroupName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to
     * retrieve the IoT hub metadata and security metadata, and then combine them with the modified
     * values in a new body to update the IoT hub.
     * @summary Create or update the metadata of an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @param [options] The optional parameters
     * @returns Promise<Models.IotHubResourceCreateOrUpdateResponse>
     */
    IotHubResource.prototype.createOrUpdate = function (resourceGroupName, resourceName, iotHubDescription, options) {
        return this.beginCreateOrUpdate(resourceGroupName, resourceName, iotHubDescription, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
     * @summary Update an existing IoT Hubs tags.
     * @param resourceGroupName Resource group identifier.
     * @param resourceName Name of iot hub to update.
     * @param [options] The optional parameters
     * @returns Promise<Models.IotHubResourceUpdateResponse>
     */
    IotHubResource.prototype.update = function (resourceGroupName, resourceName, options) {
        return this.beginUpdate(resourceGroupName, resourceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Delete an IoT hub.
     * @summary Delete an IoT hub
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param [options] The optional parameters
     * @returns Promise<Models.IotHubResourceDeleteMethodResponse>
     */
    IotHubResource.prototype.deleteMethod = function (resourceGroupName, resourceName, options) {
        return this.beginDeleteMethod(resourceGroupName, resourceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    IotHubResource.prototype.listBySubscription = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listBySubscriptionOperationSpec, callback);
    };
    IotHubResource.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    IotHubResource.prototype.getStats = function (resourceGroupName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, getStatsOperationSpec, callback);
    };
    IotHubResource.prototype.getValidSkus = function (resourceGroupName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, getValidSkusOperationSpec, callback);
    };
    IotHubResource.prototype.listEventHubConsumerGroups = function (resourceGroupName, resourceName, eventHubEndpointName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            eventHubEndpointName: eventHubEndpointName,
            options: options
        }, listEventHubConsumerGroupsOperationSpec, callback);
    };
    IotHubResource.prototype.getEventHubConsumerGroup = function (resourceGroupName, resourceName, eventHubEndpointName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            eventHubEndpointName: eventHubEndpointName,
            name: name,
            options: options
        }, getEventHubConsumerGroupOperationSpec, callback);
    };
    IotHubResource.prototype.createEventHubConsumerGroup = function (resourceGroupName, resourceName, eventHubEndpointName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            eventHubEndpointName: eventHubEndpointName,
            name: name,
            options: options
        }, createEventHubConsumerGroupOperationSpec, callback);
    };
    IotHubResource.prototype.deleteEventHubConsumerGroup = function (resourceGroupName, resourceName, eventHubEndpointName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            eventHubEndpointName: eventHubEndpointName,
            name: name,
            options: options
        }, deleteEventHubConsumerGroupOperationSpec, callback);
    };
    IotHubResource.prototype.listJobs = function (resourceGroupName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, listJobsOperationSpec, callback);
    };
    IotHubResource.prototype.getJob = function (resourceGroupName, resourceName, jobId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            jobId: jobId,
            options: options
        }, getJobOperationSpec, callback);
    };
    IotHubResource.prototype.getQuotaMetrics = function (resourceGroupName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, getQuotaMetricsOperationSpec, callback);
    };
    IotHubResource.prototype.getEndpointHealth = function (resourceGroupName, iotHubName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            iotHubName: iotHubName,
            options: options
        }, getEndpointHealthOperationSpec, callback);
    };
    IotHubResource.prototype.checkNameAvailability = function (name, options, callback) {
        return this.client.sendOperationRequest({
            name: name,
            options: options
        }, checkNameAvailabilityOperationSpec, callback);
    };
    IotHubResource.prototype.testAllRoutes = function (input, iotHubName, resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            input: input,
            iotHubName: iotHubName,
            resourceGroupName: resourceGroupName,
            options: options
        }, testAllRoutesOperationSpec, callback);
    };
    IotHubResource.prototype.testRoute = function (input, iotHubName, resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            input: input,
            iotHubName: iotHubName,
            resourceGroupName: resourceGroupName,
            options: options
        }, testRouteOperationSpec, callback);
    };
    IotHubResource.prototype.listKeys = function (resourceGroupName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, listKeysOperationSpec, callback);
    };
    IotHubResource.prototype.getKeysForKeyName = function (resourceGroupName, resourceName, keyName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            keyName: keyName,
            options: options
        }, getKeysForKeyNameOperationSpec, callback);
    };
    IotHubResource.prototype.exportDevices = function (resourceGroupName, resourceName, exportDevicesParameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            exportDevicesParameters: exportDevicesParameters,
            options: options
        }, exportDevicesOperationSpec, callback);
    };
    IotHubResource.prototype.importDevices = function (resourceGroupName, resourceName, importDevicesParameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            importDevicesParameters: importDevicesParameters,
            options: options
        }, importDevicesOperationSpec, callback);
    };
    /**
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to
     * retrieve the IoT hub metadata and security metadata, and then combine them with the modified
     * values in a new body to update the IoT hub.
     * @summary Create or update the metadata of an IoT hub.
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param iotHubDescription The IoT hub metadata and security metadata.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    IotHubResource.prototype.beginCreateOrUpdate = function (resourceGroupName, resourceName, iotHubDescription, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            iotHubDescription: iotHubDescription,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
     * @summary Update an existing IoT Hubs tags.
     * @param resourceGroupName Resource group identifier.
     * @param resourceName Name of iot hub to update.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    IotHubResource.prototype.beginUpdate = function (resourceGroupName, resourceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Delete an IoT hub.
     * @summary Delete an IoT hub
     * @param resourceGroupName The name of the resource group that contains the IoT hub.
     * @param resourceName The name of the IoT hub.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    IotHubResource.prototype.beginDeleteMethod = function (resourceGroupName, resourceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            resourceName: resourceName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    IotHubResource.prototype.listBySubscriptionNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listBySubscriptionNextOperationSpec, callback);
    };
    IotHubResource.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    IotHubResource.prototype.getValidSkusNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getValidSkusNextOperationSpec, callback);
    };
    IotHubResource.prototype.listEventHubConsumerGroupsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listEventHubConsumerGroupsNextOperationSpec, callback);
    };
    IotHubResource.prototype.listJobsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listJobsNextOperationSpec, callback);
    };
    IotHubResource.prototype.getQuotaMetricsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getQuotaMetricsNextOperationSpec, callback);
    };
    IotHubResource.prototype.getEndpointHealthNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getEndpointHealthNextOperationSpec, callback);
    };
    IotHubResource.prototype.listKeysNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listKeysNextOperationSpec, callback);
    };
    return IotHubResource;
}());
export { IotHubResource };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IotHubDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listBySubscriptionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IotHubDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IotHubDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getStatsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubStats",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RegistryStatistics
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getValidSkusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/skus",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IotHubSkuDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listEventHubConsumerGroupsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.eventHubEndpointName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EventHubConsumerGroupsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getEventHubConsumerGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.eventHubEndpointName,
        Parameters.name
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EventHubConsumerGroupInfo
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var createEventHubConsumerGroupOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.eventHubEndpointName,
        Parameters.name
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            properties: [
                "options",
                "properties"
            ]
        },
        mapper: __assign(__assign({}, Mappers.EventHubConsumerGroupBodyDescription), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.EventHubConsumerGroupInfo
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var deleteEventHubConsumerGroupOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.eventHubEndpointName,
        Parameters.name
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listJobsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.JobResponseListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getJobOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs/{jobId}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.jobId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.JobResponse
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getQuotaMetricsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/quotaMetrics",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IotHubQuotaMetricInfoListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getEndpointHealthOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routingEndpointsHealth",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.iotHubName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EndpointHealthDataListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var checkNameAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            name: "name"
        },
        mapper: __assign(__assign({}, Mappers.OperationInputs), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IotHubNameAvailabilityInfo
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var testAllRoutesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testall",
    urlParameters: [
        Parameters.iotHubName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "input",
        mapper: __assign(__assign({}, Mappers.TestAllRoutesInput), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.TestAllRoutesResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var testRouteOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testnew",
    urlParameters: [
        Parameters.iotHubName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "input",
        mapper: __assign(__assign({}, Mappers.TestRouteInput), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.TestRouteResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listKeysOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getKeysForKeyNameOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.keyName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SharedAccessSignatureAuthorizationRule
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var exportDevicesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "exportDevicesParameters",
        mapper: __assign(__assign({}, Mappers.ExportDevicesRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.JobResponse
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var importDevicesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "importDevicesParameters",
        mapper: __assign(__assign({}, Mappers.ImportDevicesRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.JobResponse
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch0,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "iotHubDescription",
        mapper: __assign(__assign({}, Mappers.IotHubDescription), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IotHubDescription
        },
        201: {
            bodyMapper: Mappers.IotHubDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            tags: [
                "options",
                "tags"
            ]
        },
        mapper: __assign(__assign({}, Mappers.TagsResource), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IotHubDescription
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IotHubDescription
        },
        202: {
            bodyMapper: Mappers.IotHubDescription
        },
        204: {},
        404: {
            bodyMapper: Mappers.ErrorDetails
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listBySubscriptionNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IotHubDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IotHubDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getValidSkusNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IotHubSkuDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listEventHubConsumerGroupsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EventHubConsumerGroupsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listJobsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.JobResponseListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getQuotaMetricsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IotHubQuotaMetricInfoListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var getEndpointHealthNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EndpointHealthDataListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
var listKeysNextOperationSpec = {
    httpMethod: "POST",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    serializer: serializer
};
//# sourceMappingURL=iotHubResource.js.map